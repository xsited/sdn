module vpnaas
{
    grouping vpn-router-interface {
        leaf router {
            mandatory true;
        }
        leaf interface {
            type string;
            mandatory true;
        }
    }

    leaf topology {
        type enumeration {
            enum hub-n-spoke;
            enum mesh;
            enum  tree;
        }
    }


    grouping circuit-grouping  {

        leaf protocol {
            type enumeration {
                enum l2vpn;
                enum l3vpn;
                enum ssl;
                enum ipsec;
            }
        default "l2vpn";
        }


        container endpoint-a {
            uses vpn-router-interface;
        }

        container endpoint-b {
            uses vpn-router-interface;
        }

        leaf encapsulation-type {
            type enumeration {
                enum ethernet;
                enum ethernet-vlan;
            }
        }

        leaf vlan {
            type vlan-id;
            description "VLAN, should only be defined if encapsulation type is Ethernet-VLAN";
        }

        leaf service-id {
            type string;
            description "Unique id for the service";
        }

        leaf vpn-id	{
            descsription
            "uuid-str	N/A	R	generated	N/A	UUID for VPNService Object";
        }

        leaf tenant-id	{
            descsription
            "uuid-str	Yes	CR	None	valid tenant_id	UUID of the tenant for the vpn service";
        }

        leaf subscriber-id	{
            descsription
            "uuid-str	Yes	CR	None	valid tenant_id	UUID of the tenant for the vpn service";
        }

        leaf vpn-name	{
            description
            "string	no	CRU	None	N/A	name of the VPN Service";
            type string {
                length 64;
            }
        }

        leaf vpn-description	{
            description
            "string	no	CRU	None	N/A	Description of the VPN Service";
            type string {
                length 64;
            }
        }


        leaf vpn-status	{
            description
            "string	N/A	R	N/A	N/A	Indicates whether ipsec vpnservice is currently operational. Possible values include";
            type enumeration {
                emum "active" {
                    value 1;
                }
                emum "down" {
                    value 2;
                }
                emum "up" {
                    value 3;
                }
                emum "error" {
                    value 4;
                }
                emum "suspended" {
                    value 5;
                }
            }
        }


        leaf admin-state-up {
            description
            "bool	N/A	CRU	TRUE	true/false	Administrative state of vpnservice. If false (down), port does not forward packets";
            type boolean;

        }

        leaf subnet-id	{
            description
            "uuid	yes*( subnet_id is needed)	CR	N/A	Valid subnet id	Subnet id in which the tenant wants the vpn service";
        }

        leaf router-id	{
            description
            "uuid	yes	CR	N/A	Valid router id	Router id to which the vpn service is inserted";
        }

    }


    rpc ping {
        description
        "Generate icmp and return response";
        input {
            leaf circuit_id {
                use uuid;
            }

            leaf ecmp-choice {
                type ecmp-choices;
                description
                "0 means use the specified interface
                1 means use round robin";
            }
            list probe-interfaces {
                key "interface";
                leaf interface {
                    type if:interface-ref;
            }
        }

        container source-address {
            uses mep-address;
            leaf mep-id {
                type MEP-id;
            }
        }
        container destination-address {
            uses mep-address;
            leaf mep-id {
                type MEP-id;
            }
        }
    }
    output {
        uses performance-metrics {
            description
            "Statistics";
        }
    }
}

rpc iperf {
    description
    "Generate icmp and return response";

    input {
        leaf circuit_id {
            use uuid;
        }
        leaf data_length {
            type uint16;
        default 64;
        }
        leaf duration {
            type uint16;
        default 30;
        }
        container source-address {
            uses mep-address;
            leaf mep-id {
                type MEP-id;
            }
        }
        container destination-address {
            uses mep-address;
            leaf mep-id {
                type MEP-id;
            }
        }
    }
    output {
        uses performance-metrics {
            description
            "Statistics";
        }
    }
}



grouping ike-policy-grouping
{

    leaf id	{
        description
        "uuid-str	N/A	R	generated	N/A	UUID for  the  IKEPolicy";
    }

    leaf tenant-id	{
        description
        "uuid-str	Yes	CR	None	valid tenant_id	UUID for owner of the vpn service";
    }

    leaf name {
        description
        "string	yes	CRU	None	N/A	friendly name for the ikepolicy";
    }

    leaf description {
        description
        "string	no	CRU	None	N/A	Description of the ikepolicy";
    }

    leaf auth_algorithm {
        description
        "string	no	CRU	sha1	N/A	Authentication Hash algorithms sha1";
        type enumeration {
            emum "sha1" {
                value 1;
            }
        }
    }
    leaf encryption_algorithm {
        description
        "string	no	CRU	aes-128	N/A	Encryption Algorithms 3des, aes-128, aes-256, aes-192 etc.,";
        type enumeration {
            emum "3des" {
                value 1;
            }
            emum "aes-128" {
                value 2;
            }
            emum "aes-256" {
                value 3;
            }
            emum "aes-192" {
                value 4;
            }
        }
    }

    leaf phase1_negotiation_mode {
        description
        "string	no	CRU	Main Mode	N/A	IKE mode Main mode";
        type enumeration {
            emum "ike" {
                value 1;
            }
            emum "main" {
                value 2;
            }
        }
    }
    leaf pfs {
        description
        "	string	no	CRU	Group5	N/A	Perfect Forward Secrecy  ( Group2, Group5, Group14)";
        type string { length 16; }
    }
    leaf ike_version{
        description
        "string	no	CRU	v1	N/A	v1 or v2 version";
        type enumeration {
            emum "v1" {
                value 1;
            }
            emum "v2" {
                value 2;
            }
        }
    }
    conatiner lifetime {
        leaf units {
            description
            "string	no	CRU	seconds	seconds	Lifetime of the  SA unit in seconds";
        }
        leaf value {
            description
            "	integer	no	CRU	3600 for seconds	Integer	Lifetime value in  seconds (value >= 60)";
            type int;
        default 3600;
        }
    }

    grouping ipsec-policy-grouping
    {
        leaf id	{
            description
            "uuid-str	N/A	R	generated	N/A	UUID for  the  IPsecPolicy";
        }
        leaf tenant_id	{
            description
            "uuid-str	Yes	CR	None	valid tenant_id	UUID for owner of the vpn service";
        }
        leaf name	{
            description
            "string	yes	CRU	None	N/A	friendly name for the IPsecPolicy";
        }
        leaf description	{
            description
            "string	no	CRU	None	N/A	Description of  the policy";
        }

        leaf transform_protocol	{
            description
            "string	no	CRU	ESP	N/A	Tranform  Protocol used such as ESP or AH or AH-ESP";
        }

        leaf encapsulation_mode	{
            description
            "string	no	CRU	tunnel	N/A	Encapsulation mode either Tunnel mode or transport mode";
        }
        leaf auth_algorithm	{
            description
            "string	no	CRU	sha1	N/A	Authentication algorithm sha1";
        }

        leaf encryption_algorithm	{
            description
            "string	no	CRU	aes-128	N/A	Encryption Algorithms 3des, aes-128, aes-256, aes-192";
        }

        leaf pfs	{
            description
            "string	no	CRU	group5	N/A	Perfect Forward Secrecy  ( group2, group5, group14)";
        }
        grouping lifetime-grouping {

            leaf units	{
                description
                "string	no	CRU	seconds	seconds	Lifetime of the  SA unit in ‘seconds’";
            }
            leaf value	{
                description
                "integer	no	CRU	3600 for seconds	Integer	Lifetime value in  seconds (value >= 60)";
            }
        }
    }


    grouping ipsec-site-connection {
        leaf id
        {
            description
            "uuid-str	N/A	R	generated	N/A	UUID for  the vpns connection";
        }
        leaf tenant_id
        {
            description
            "uuid-str	Yes	CR	None	valid tenant_id	UUID for owner of the  vpn service";
        }
        leaf name
        {
            description
            "string	no	CRU	None	N/A	name for ipsec-site-connection";
        }
        leaf description
        {
            description
            "string	no	CRU	None	N/A	Description of the ipsec-site-connection";
        }
        leaf peer_address
        {
            description
            "ipaddress(v4 or v6)	yes	CRU	N/A	valid ip address (v4 or v6)	peer vpn gateway public address or FQDN";
        }

        leaf peer_id
        {
            description
            "string	yes	CRU	N/A	N/A	Peer identifier ( Can be name, string or FQDN )";
        }
        leaf peer_cidrs
        {
            description
            "list[string]	yes	cru	n/a	list of valid cidr in the form <network_address>/<prefix>	peer private cidrs";
        }

        leaf route_mode
        {
            description
            "string	no	r	static	static	static";
        }

        leaf mtu
        {
            description
            "integer	no	cru	1500	integer	mtu - maximum transmission unit to address fragmentation ( value>=68 )";
        }
        leaf auth_mode
        {
            description
            "string	no	r	psk	psk/certs	authentication mode, either psk or certificate";
        }
        leaf psk
        {
            description
            "string	yes	CRU	N/A	NO	Pre-shared-key any string.";
        }

        leaf initiator
        {
            description
            "string	no	CRU	bi-directional	bi-directional / response-only	Whether this VPN can only respond to connections or can initiate as well";
        }

        leaf admin_state_up
        {
            description
            "bool	N/A	CRU	TRUE	true / false	Administrative state of vpn connection. If false (down), vpn concd nection does not forward packets";
        }

        leaf status
        {
            description
            "string	N/A	R	N/A	N/A	Indicates whether vpn connection is currently operational. Possible values include:ACTIVE,DOWN,BUILD,ERROR";
        }

        leaf ikepolicy_id
        {
            description
            "uuid	yes	CR	N/A	uuid of ikepolicy	uuid id of ikepolicy";
        }

        leaf ipsecpolicy_id
        {
            description
            "uuid	yes	CR	N/A	uuid of ipsecpolicy	uuid id of ipsecpolicy";
        }

        leaf vpnservice_id
        {
            description
            "uuid	yes	CR	N/A	uuid of vpnservice	service id of vpnservice";
        }
        grouping dpd-grouping {
            leaf action
            {
                description
                "string	no	CRU	hold	hold / clear / disabled /restart /restart_by_peer	DPD actions controls the use of Dead Peer Detection Protocol. ( clear, hold, restart, disabled, restart-by-peer)";
            }

            leaf interval
            {
                description
                "integer	no	CRU	30	> 0	sec for DPD delay";
            }
            leaf timeout
            {
                description
                "integer	no	CRU	120	> 0 & > dpd_interval	sec for DPD timeout";
            }
        }
    }
}





grouping ike-policy-grouping
{

leaf id	{
    description
    "uuid-str	N/A	R	generated	N/A	UUID for  the  IKEPolicy";
}

leaf tenant-id	{
    description
    "uuid-str	Yes	CR	None	valid tenant_id	UUID for owner of the vpn service";
}

leaf name {
    description
    "string	yes	CRU	None	N/A	friendly name for the ikepolicy";
}

leaf description {
    description
    "string	no	CRU	None	N/A	Description of the ikepolicy";
}

leaf auth_algorithm {
    description
    "string	no	CRU	sha1	N/A	Authentication Hash algorithms sha1";
    type enumeration {
        emum "sha1" {
            value 1;
        }
    }
}
leaf encryption_algorithm {
    description
    "string	no	CRU	aes-128	N/A	Encryption Algorithms 3des, aes-128, aes-256, aes-192 etc.,";
    type enumeration {
        emum "3des" {
            value 1;
        }
        emum "aes-128" {
            value 2;
        }
        emum "aes-256" {
            value 3;
        }
        emum "aes-192" {
            value 4;
        }
    }
}

leaf phase1_negotiation_mode {
    description
    "string	no	CRU	Main Mode	N/A	IKE mode Main mode";
    type enumeration {
        emum "ike" {
            value 1;
        }
        emum "main" {
            value 2;
        }
    }
}
leaf pfs {
    description
    "	string	no	CRU	Group5	N/A	Perfect Forward Secrecy  ( Group2, Group5, Group14)";
    type string { length 16; }
}
leaf ike_version{
    description
    "string	no	CRU	v1	N/A	v1 or v2 version";
    type enumeration {
        emum "v1" {
            value 1;
        }
        emum "v2" {
            value 2;
        }
    }
}
container lifetime {
leaf units {
    description
    "string	no	CRU	seconds	seconds	Lifetime of the  SA unit in ‘seconds’";
}
leaf value {
    description
    "	integer	no	CRU	3600 for seconds	Integer	Lifetime value in  seconds (value >= 60)";
    type int;
default 3600;
}
}
}

grouping ipsec-policy-grouping
{
    leaf id	{
        description
        "uuid-str	N/A	R	generated	N/A	UUID for  the  IPsecPolicy";
    }
    leaf tenant_id	{
        description
        "uuid-str	Yes	CR	None	valid tenant_id	UUID for owner of the vpn service";
    }
    leaf name	{
        description
        "string	yes	CRU	None	N/A	friendly name for the IPsecPolicy";
    }
    leaf description	{
        description
        "string	no	CRU	None	N/A	Description of  the policy";
    }

    leaf transform_protocol	{
        description
        "string	no	CRU	ESP	N/A	Tranform  Protocol used such as ESP or AH or AH-ESP";
    }

    leaf encapsulation_mode	{
        description
        "string	no	CRU	tunnel	N/A	Encapsulation mode either Tunnel mode or transport mode";
    }
    leaf auth_algorithm	{
        description
        "string	no	CRU	sha1	N/A	Authentication algorithm sha1";
    }

    leaf encryption_algorithm	{
        description
        "string	no	CRU	aes-128	N/A	Encryption Algorithms 3des, aes-128, aes-256, aes-192";
    }

    leaf pfs	{
        description
        "string	no	CRU	group5	N/A	Perfect Forward Secrecy  ( group2, group5, group14)";
    }
    container lifetime {

        leaf units	{
            description
            "string	no	CRU	seconds	seconds	Lifetime of the  SA unit in ‘seconds’";
        }
        leaf value	{
            description
            "integer	no	CRU	3600 for seconds	Integer	Lifetime value in  seconds (value >= 60)";
        }
    }
}


grouping ipsec-site-connection {
   leaf id
   {
        description
        "uuid-str	N/A	R	generated	N/A	UUID for  the vpns connection";
   }
   leaf tenant_id
   {
        description
       "uuid-str	Yes	CR	None	valid tenant_id	UUID for owner of the  vpn service";
   }
   leaf name
   {
        description
        "string	no	CRU	None	N/A	name for ipsec-site-connection";
   }
   leaf description
   {
        description
        "string	no	CRU	None	N/A	Description of the ipsec-site-connection";
   }
   leaf peer_address
   {
         description
        "ipaddress(v4 or v6)	yes	CRU	N/A	valid ip address (v4 or v6)	peer vpn gateway public address or FQDN";
   }

   leaf peer_id
   {
        description
        "string	yes	CRU	N/A	N/A	Peer identifier ( Can be name, string or FQDN )";
   }
   leaf peer_cidrs
   {
        description
        "list[string]	yes	CRU	N/A	list of valid cidr in the form <network_address>/<prefix>	Peer private cidrs";
   }

   leaf route_mode
   {
                description
                "string	no	R	static	static	Static";
   }

   leaf mtu
   {
       description
       "integer	no	CRU	1500	Integer	mtu - maximum transmission unit to address fragmentation ( value>=68 )";
   }
   leaf auth_mode
   {
       description
       "string	no	R	psk	psk/certs	Authentication mode, either PSK or certificate";
   }
   leaf psk
   {
       description
       "string	yes	CRU	N/A	NO	Pre-shared-key any string.";
   }

   leaf initiator
   {
       description
       "string	no	CRU	bi-directional	bi-directional / response-only	Whether this VPN can only respond to connections or can initiate as well";
    }

   leaf admin_state_up
   {
       description
       "bool	N/A	CRU	TRUE	true / false	Administrative state of vpn connection. If false (down), vpn concd nection does not forward packets";
   }

   leaf status
   {
       description
       "string	N/A	R	N/A	N/A	Indicates whether vpn connection is currently operational. Possible values include:ACTIVE,DOWN,BUILD,ERROR";
   }

   leaf ikepolicy_id
   {
        description
        "uuid	yes	CR	N/A	uuid of ikepolicy	uuid id of ikepolicy";
   }

   leaf ipsecpolicy_id
   {
        description
         "uuid	yes	CR	N/A	uuid of ipsecpolicy	uuid id of ipsecpolicy";
   }

   leaf vpnservice_id
   {
       description
       "uuid	yes	CR	N/A	uuid of vpnservice	service id of vpnservice";
    }
   container dpd{
       leaf action
       {
            description
            "string	no	CRU	hold	hold / clear / disabled /restart /restart_by_peer	DPD actions controls the use of Dead Peer Detection Protocol. ( clear, hold, restart, disabled, restart-by-peer)";
       }

       leaf interval
       {
           description
          "integer	no	CRU	30	> 0	sec for DPD delay";
       }
       leaf timeout
       {
           description
           "integer	no	CRU	120	> 0 & > dpd_interval	sec for DPD timeout";
       }
    }
  }
}

