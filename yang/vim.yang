
module vim
{
	namespace "http://cablelabs.com/yang/nfv/vim";
	prefix cablelabs;


  	import ietf-yang-types {
    		prefix yang;
    		revision-date 2010-09-24;
  	}
  	import ietf-inet-types {
    		prefix inet;
    		revision-date 2010-09-24;
  	}


	typedef vm-resource-type
	{
		type enumeration {
		}
		reference "?";
		description
		"This enumeration contains the all EPL service types epl, evpl, .";
	}

	import vm-resource {
		leaf id {
			type uint8 {
				range 0..256;
			}
			description
			"";
		}
		leaf name {
			type string {
			     range 0..64;
			}
			description
			"";
		}
		leaf memory {
			type uint64 {
				range 0..;
			}
			description
			"";
		}
		leaf disk {
			type uint8 {
				range 0..256;
			}
			description
			"";
		}
		leaf ephemeral {
			type uint8 {
				range 0..256;
			}
			description
			"";
		}
		leaf vcpu {
			type uint8 {
				range 0..256;
			}
			description
			"";
		}

	}

	
/*
XXX -- put these descriptions up there
ID	A unique numeric ID.
Name	A descriptive name, such as xx.size_name, is conventional but not required, though some third-party tools may rely on it.
Memory_MB	Virtual machine memory in megabytes.
Disk	Virtual root disk size in gigabytes. This is an ephemeral disk the base image is copied into. You don't use it when you boot from a persistent volume. The "0" size is a special case that uses the native base image size as the size of the ephemeral root volume.
Ephemeral	Specifies the size of a secondary ephemeral data disk. This is an empty, unformatted disk and exists only for the life of the instance.
Swap	Optional swap space allocation for the instance.
VCPUs	Number of virtual CPUs presented to the instance.
RXTX_Factor	Optional property that allows created servers to have a different bandwidth cap from that defined in the network they are attached to. This factor is multiplied by the rxtx_base property of the network. Default value is 1.0 (that is, the same as the attached network).
Is_Public	Boolean value that indicates whether the flavor is available to all users or private. Private flavors do not get the current tenant assigned to them. Defaults to True.
extra_specs	
*/


	type vm-state-type {
	type enumeration {
			enum "paused" {
				value 1;
			}
			enum "suspended" {
				value 2;
			}
			enum "active" {
				value 3;
			}
			enum "shutoff" {
				value 4;
			}
			enum "rescued" {
				value 5;
			}
			enum "stopped" {
				value 6;
			}
	}
	}

	type vm-action-type {
	type enumeration {
			enum "unpause" {
				value 1;
			}
			enum "resume" {
				value 2;
			}
			enum "rescue" {
				value 3;
			}
			enum "rebuild" {
				value 4;
			}
			enum "unrescue" {
				value 5;
			}
			enum "admin-password" {
				value 6;
			}
			enum "password" {
				value 7;
			}
	}
	}

	typedef vm-reference {
		type string;
		description
		"Type to identify the vm";
	}

	typedef project-reference {
		type string;
		description
		"Type to identify the project";
	}


	rpc vim_vm_create {
			description
			"Create a vm";
			reference "";

			input {
				container vm-input
				{
					uses vm-attributes-grouping;
				}
			}
			output {
				leaf status
				{
					type uint32;
				}
				leaf vm-id
				{
					type vm-reference;
				}
			}
	}

	rpc vim_vm_get {
			description
			"Read a vm";
			reference "";

			input {
				leaf tenant-id
				{
					type tenant-reference;
				}
				leaf vm-id
				{
					type vm-reference;
				}
			}
			output {
				leaf status
				{
					type uint32;
				}
				leaf cvm-output
				{
					uses vm-attributes-grouping;
				}
			}
	}

	rpc vim_vm_update {
			description
			"Update a vm";
			reference "";

			input {
				leaf tenant-id
				{
					type tenant-reference;
				}
				leaf vm-id
				{
					type vm-reference;
				}
			}
			output {
				leaf status
				{
					type uint32;
				}
				leaf vm-output
				{
					uses vm-attributes-grouping;
				}
			}
	}

	rpc vim_vm_delete {
			description
			"delete a vm";
			reference "";

			input {
				leaf tenant-id
				{
					type tenant-reference;
				}
				leaf vm-id
				{
					type vm-reference;
				}
			}
			output {
				leaf status
				{
					type uint32;
				}
				container vm-input
				{
					uses vm-attributes-grouping;
				}
			}
	}

	rpc vim_vm_list {
			description
			"List all vms";
			reference "";

			input {
				leaf tenant-id
				{
					type tenant-reference;
				}
			}
			output {
				leaf status
				{
					type uint32;
				}
				leaf vm-id
				{
					type vm-reference;
				}
			}
	}
}
